// genFontsBase64.mjs
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// üîß ƒê∆∞·ªùng d·∫´n t·ªõi th∆∞ m·ª•c font
const fontFolder = path.resolve(__dirname, "../../../public/fonts/Roboto");

// üîß File output
const outputPath = path.resolve(__dirname, "fontsBase64.ts");

// Danh s√°ch font
const fonts = [
  "Roboto-Regular.ttf",
  "Roboto-Bold.ttf",
  "Roboto-Italic.ttf",
  "Roboto-BoldItalic.ttf",
];

const lines = [
  "// Auto-generated base64 fonts\n",
  "// Do not edit manually. Run genFontsBase64.mjs to regenerate.\n\n",
];

// ‚úÖ Kh√¥ng d√πng base64 l√†m file name ‚ùå
fonts.forEach((font) => {
  const fontPath = path.join(fontFolder, font); // ‚úÖ ƒê√¢y m·ªõi l√† path th·∫≠t
  const fontData = fs.readFileSync(fontPath); // ƒë·ªçc file .ttf
  const base64 = fontData.toString("base64");

  const varName = font
    .replace(".ttf", "")
    .replace("Roboto-", "Roboto")
    .replace(/-/g, "");

  lines.push(
    `export const ${varName} = "data:font/truetype;charset=utf-8;base64,${base64}";\n\n`,
  );
});

// ‚úÖ Ghi ra file duy nh·∫•t
fs.writeFileSync(outputPath, lines.join(""), "utf8");
